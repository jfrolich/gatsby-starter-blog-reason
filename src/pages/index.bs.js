// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Layout from "../components/Layout.bs.js";
import * as Gatsby from "gatsby";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Typography from "../utils/Typography.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var Raw = {};

var query = (graphql`
  query   {
    site  {
      siteMetadata  {
        title
      }
    }
  allMarkdownRemark(sort: {fields: [frontmatter___date], order: [DESC]})  {
    edges  {
      node  {
        excerpt
        fields  {
          slug
        }
        frontmatter  {
          date(formatString: "MMMM DD, YYYY")
          title
          description
        }
      }
    }
  }
}
`);

function parse(value) {
  var value$1 = value.site;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.siteMetadata;
    var tmp$1;
    if (value$2 == null) {
      tmp$1 = undefined;
    } else {
      var value$3 = value$2.title;
      tmp$1 = {
        title: !(value$3 == null) ? value$3 : undefined
      };
    }
    tmp = {
      siteMetadata: tmp$1
    };
  }
  var value$4 = value.allMarkdownRemark;
  var value$5 = value$4.edges;
  return {
          site: tmp,
          allMarkdownRemark: {
            edges: value$5.map(function (value) {
                  var value$1 = value.node;
                  var value$2 = value$1.excerpt;
                  var value$3 = value$1.fields;
                  var tmp;
                  if (value$3 == null) {
                    tmp = undefined;
                  } else {
                    var value$4 = value$3.slug;
                    tmp = {
                      slug: !(value$4 == null) ? value$4 : undefined
                    };
                  }
                  var value$5 = value$1.frontmatter;
                  var tmp$1;
                  if (value$5 == null) {
                    tmp$1 = undefined;
                  } else {
                    var value$6 = value$5.date;
                    var value$7 = value$5.title;
                    var value$8 = value$5.description;
                    tmp$1 = {
                      date: !(value$6 == null) ? Caml_option.some(value$6) : undefined,
                      title: !(value$7 == null) ? value$7 : undefined,
                      description: !(value$8 == null) ? value$8 : undefined
                    };
                  }
                  return {
                          node: {
                            excerpt: !(value$2 == null) ? value$2 : undefined,
                            fields: tmp,
                            frontmatter: tmp$1
                          }
                        };
                })
          }
        };
}

function serialize(value) {
  var value$1 = value.allMarkdownRemark;
  var value$2 = value$1.edges;
  var edges = value$2.map(function (value) {
        var value$1 = value.node;
        var value$2 = value$1.frontmatter;
        var frontmatter;
        if (value$2 !== undefined) {
          var value$3 = value$2.description;
          var description = value$3 !== undefined ? value$3 : null;
          var value$4 = value$2.title;
          var title = value$4 !== undefined ? value$4 : null;
          var value$5 = value$2.date;
          var date = value$5 !== undefined ? Caml_option.valFromOption(value$5) : null;
          frontmatter = {
            date: date,
            title: title,
            description: description
          };
        } else {
          frontmatter = null;
        }
        var value$6 = value$1.fields;
        var fields;
        if (value$6 !== undefined) {
          var value$7 = value$6.slug;
          var slug = value$7 !== undefined ? value$7 : null;
          fields = {
            slug: slug
          };
        } else {
          fields = null;
        }
        var value$8 = value$1.excerpt;
        var excerpt = value$8 !== undefined ? value$8 : null;
        var node = {
          excerpt: excerpt,
          fields: fields,
          frontmatter: frontmatter
        };
        return {
                node: node
              };
      });
  var allMarkdownRemark = {
    edges: edges
  };
  var value$3 = value.site;
  var site;
  if (value$3 !== undefined) {
    var value$4 = value$3.siteMetadata;
    var siteMetadata;
    if (value$4 !== undefined) {
      var value$5 = value$4.title;
      var title = value$5 !== undefined ? value$5 : null;
      siteMetadata = {
        title: title
      };
    } else {
      siteMetadata = null;
    }
    site = {
      siteMetadata: siteMetadata
    };
  } else {
    site = null;
  }
  return {
          site: site,
          allMarkdownRemark: allMarkdownRemark
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var Z__INTERNAL = {
  _graphql_sort_125: 0,
  graphql_module: 0
};

function Index(Props) {
  var data = Props.data;
  var $$location = Props.location;
  var match = parse(data);
  var match$1 = match.site;
  if (match$1 === undefined) {
    return null;
  }
  var match$2 = match$1.siteMetadata;
  if (match$2 === undefined) {
    return null;
  }
  var title = match$2.title;
  if (title !== undefined) {
    return React.createElement(Layout.make, {
                location: $$location,
                title: title,
                children: Belt_Array.map(match.allMarkdownRemark.edges, (function (param) {
                        var match = param.node;
                        var match$1 = match.fields;
                        if (match$1 === undefined) {
                          return null;
                        }
                        var slug = match$1.slug;
                        if (slug === undefined) {
                          return null;
                        }
                        var match$2 = match.frontmatter;
                        if (match$2 !== undefined) {
                          return React.createElement("article", {
                                      key: slug
                                    }, React.createElement("header", undefined, React.createElement("h3", {
                                              style: {
                                                marginBottom: Typography.rhythm(0.25)
                                              }
                                            }, React.createElement(Gatsby.Link, {
                                                  children: Belt_Option.getWithDefault(match$2.title, slug),
                                                  to: slug,
                                                  style: {
                                                    boxShadow: "none"
                                                  }
                                                })), React.createElement("small", undefined, Belt_Option.getWithDefault(Belt_Option.flatMap(match$2.date, Js_json.decodeString), ""))), React.createElement("section", undefined, React.createElement("p", {
                                              dangerouslySetInnerHTML: {
                                                __html: Belt_Option.getWithDefault(match$2.description, Belt_Option.getWithDefault(match.excerpt, ""))
                                              }
                                            })));
                        } else {
                          return null;
                        }
                      }))
              });
  } else {
    return null;
  }
}

var make = Index;

var $$default = Index;

export {
  Raw ,
  query ,
  parse ,
  serialize ,
  serializeVariables ,
  makeVariables ,
  makeDefaultVariables ,
  Z__INTERNAL ,
  make ,
  $$default ,
  $$default as default,
  
}
/* query Not a pure module */
