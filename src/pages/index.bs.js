// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Layout from "../components/Layout.bs.js";
import * as Gatsby from "gatsby";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Typography from "../utils/Typography.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

let { graphql } = require("gatsby")
;

var query = (graphql`
  query   {
    site  {
      siteMetadata  {
        title
      }
    }
  allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC})  {
    edges  {
      node  {
        excerpt
        fields  {
          slug
        }
        frontmatter  {
          date(formatString: "MMMM DD, YYYY")
          title
          description
        }
      }
    }
  }
}
`);

function parse(value) {
  var value$1 = value["site"];
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1["siteMetadata"];
    var tmp$1;
    if (value$2 == null) {
      tmp$1 = undefined;
    } else {
      var value$3 = value$2["title"];
      tmp$1 = {
        title: (value$3 == null) ? undefined : value$3
      };
    }
    tmp = {
      siteMetadata: tmp$1
    };
  }
  var value$4 = value["allMarkdownRemark"];
  var value$5 = value$4["edges"];
  return {
          site: tmp,
          allMarkdownRemark: {
            edges: value$5.map((function (value) {
                    var value$1 = value["node"];
                    var value$2 = value$1["excerpt"];
                    var value$3 = value$1["fields"];
                    var tmp;
                    if (value$3 == null) {
                      tmp = undefined;
                    } else {
                      var value$4 = value$3["slug"];
                      tmp = {
                        slug: (value$4 == null) ? undefined : value$4
                      };
                    }
                    var value$5 = value$1["frontmatter"];
                    var tmp$1;
                    if (value$5 == null) {
                      tmp$1 = undefined;
                    } else {
                      var value$6 = value$5["date"];
                      var value$7 = value$5["title"];
                      var value$8 = value$5["description"];
                      tmp$1 = {
                        date: (value$6 == null) ? undefined : Caml_option.some(value$6),
                        title: (value$7 == null) ? undefined : value$7,
                        description: (value$8 == null) ? undefined : value$8
                      };
                    }
                    return {
                            node: {
                              excerpt: (value$2 == null) ? undefined : value$2,
                              fields: tmp,
                              frontmatter: tmp$1
                            }
                          };
                  }))
          }
        };
}

function makeVar(f, param) {
  return Curry._1(f, null);
}

var definition = /* tuple */[
  parse,
  query,
  makeVar
];

function Index(Props) {
  var data = Props.data;
  var $$location = Props.location;
  var match = parse(data);
  var match$1 = match.site;
  if (match$1 !== undefined) {
    var match$2 = match$1.siteMetadata;
    if (match$2 !== undefined) {
      var match$3 = match$2.title;
      if (match$3 !== undefined) {
        return React.createElement(Layout.make, {
                    location: $$location,
                    title: match$3,
                    children: Belt_Array.map(match.allMarkdownRemark.edges, (function (param) {
                            var match = param.node;
                            var match$1 = match.fields;
                            if (match$1 !== undefined) {
                              var match$2 = match$1.slug;
                              if (match$2 !== undefined) {
                                var match$3 = match.frontmatter;
                                if (match$3 !== undefined) {
                                  var match$4 = match$3;
                                  var slug = match$2;
                                  return React.createElement("article", {
                                              key: slug
                                            }, React.createElement("header", undefined, React.createElement("h3", {
                                                      style: {
                                                        marginBottom: Typography.rhythm(0.25)
                                                      }
                                                    }, React.createElement(Gatsby.Link, {
                                                          children: Belt_Option.getWithDefault(match$4.title, slug),
                                                          to: slug,
                                                          style: {
                                                            boxShadow: "none"
                                                          }
                                                        })), React.createElement("small", undefined, Belt_Option.getWithDefault(Belt_Option.flatMap(match$4.date, Js_json.decodeString), ""))), React.createElement("section", undefined, React.createElement("p", {
                                                      dangerouslySetInnerHTML: {
                                                        __html: Belt_Option.getWithDefault(match$4.description, Belt_Option.getWithDefault(match.excerpt, ""))
                                                      }
                                                    })));
                                } else {
                                  return null;
                                }
                              } else {
                                return null;
                              }
                            } else {
                              return null;
                            }
                          }))
                  });
      } else {
        return null;
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
}

var make = Index;

var $$default = Index;

export {
  query ,
  parse ,
  makeVar ,
  definition ,
  make ,
  $$default ,
  $$default as default,
  
}
/*  Not a pure module */
